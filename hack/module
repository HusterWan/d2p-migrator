#!/bin/bash

function hook_plugins_module() {
    # generate "hook_plugins_build.go" file
    if [[ ! -f ${hook_plugins_build} ]]; then
    cat << END > ${hook_plugins_build}
// +build linux

// The file is automatically generated, DON'T EDIT.

package main

END
    fi

    grep -q $1 ${hook_plugins_build}
    if [[ $? -ne "0" ]]; then
        echo "import _ \"$1\"" >> ${hook_plugins_build}
    fi
}

function help_info() {
    echo "usage:"
    echo "     module [options]"
    echo ""
    echo "options:"
    echo "     --help, -h       Print help information"
    echo "     --add-plugin     Add a hook plugin to compile"
    echo "     --clean          Remove temporary codes, the 'build.go'"
    echo ""
}

function get_os() {
    local machine=
    local unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)     machine=Linux;;
        Darwin*)    machine=Mac;;
        CYGWIN*)    machine=Cygwin;;
        MINGW*)     machine=MinGw;;
        *)          machine="UNKNOWN:${unameOut}"
    esac
    echo $machine
}

function check_getopt() {
    getopt --test
    if [ "$?" == "4" ];then
        return 0
    fi

    local os_machine=$(get_os)
    case "${os_machine}" in
        Linux)
            echo "Please install getopt first"
            return 1
            ;;
        Mac)
            which -s brew
            if [[ $? != 0 ]];then
                echo '"Please install brew for Mac: ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
            fi
            echo ""Please install gnu-getopt for Mac: brew install gnu-getopt""
            return 1
            ;;
        *)
            echo "not supported os: ${os_machine}"
            return 1
    esac
}

check_getopt
if [ $? != 0 ]; then
    exit 1
fi

GETOPTOUT=`getopt -o h --long help,clean,add-plugin: -- "$@"`

clean=
add_plugin=
hook_plugins_build=hook_plugins_build.go

# Note the quotes around `$GETOPTOUT': should delete the quotes
 eval set -- $GETOPTOUT
 while [ -n "$1" ]
 do
 case "$1" in
     -h | --help )
         help_info
         exit 0
         shift
         ;;
     --clean)
         clean="true"
         shift
         ;;
     --add-plugin)
         add_plugin="$2"
         shift 2
         ;;
     --)
         shift
         break
         ;;
      *)
         echo "unknown parameters:"$1""
         break
         ;;
 esac
 done

if  [[ "x$clean" == "xtrue" ]]; then
    rm -f ${hook_plugins_build}
fi

if [[ "x$add_plugin" != "x" ]]; then
    hook_plugins_module $add_plugin
fi
